plugins {
  id 'eclipse'
  id 'idea'
  id 'maven-publish'
  id 'net.minecraftforge.gradle' version '[6.0,6.2)'
  id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

group = 'knightminer'
base {
  archivesName = 'simplytea'
}
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

configurations {
    deployerJars
}

version = "${minecraft_version}-${mod_version}"

sourceSets {
  main { resources {
    srcDirs "$rootDir/src/generated/resources"
    //But exclude the cache of the generated data from what gets built
    exclude '.cache'
  } }
}

minecraft {
  mappings channel: 'parchment', version: "${parchment_version}-${minecraft_version}"
  accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
  
  runs {
    client {
      workingDirectory project.file('run')

      // Recommended logging data for a userdev environment
      property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

      // Recommended logging level for the console
      property 'forge.logging.console.level', 'debug'

      mods {
        simplytea {
          source sourceSets.main
        }
      }
    }

    server {
      workingDirectory project.file('run/server')

      // Recommended logging data for a userdev environment
      property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

      // Recommended logging level for the console
      property 'forge.logging.console.level', 'debug'

      mods {
        simplytea {
          source sourceSets.main
        }
      }
    }

    data {
      workingDirectory project.file('run')

      // Recommended logging data for a userdev environment
      property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

      // Recommended logging level for the console
      property 'forge.logging.console.level', 'debug'

      args '--mod', 'simplytea', '--all', '--output', file('src/generated/resources/')

      mods {
        simplytea {
          source sourceSets.main
        }
      }
    }
  }
}

dependencies {
  minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
}


// process mods.toml to inject variables
def modsTomlSpec = copySpec{
  from(sourceSets.main.resources) {
    include 'META-INF/mods.toml'
    expand 'version': mod_version,
            'loader_range': loader_range,
            'minecraft_range': minecraft_range,
            'forge_range': forge_range
  }
}
// need to copy into each build directory, unfortunately does not seem easy to do this automatically
def buildPaths = [
        "$rootDir/out/production/resources", // IDEA
        "$rootDir/bin", // Eclipse
]

// task to add mods.toml to all relevant folders
task replaceResources {
  // copy for gradle
  copy {
    outputs.upToDateWhen { false }
    with modsTomlSpec
    into processResources.destinationDir
  }
  // copy for IDEs
  buildPaths.each { path ->
    if (new File(path).exists()) {
      copy {
        outputs.upToDateWhen { false }
        with modsTomlSpec
        into path
      }
    }
  }
}

processResources {
  exclude 'META-INF/mods.toml'
  finalizedBy replaceResources
}

jar {
  manifest {
    attributes([
      "Specification-Title": "Simply Tea",
      "Specification-Vendor": "KnightMiner",
      "Specification-Version": "1", // We are version 1 of ourselves
      "Implementation-Title": project.name,
      "Implementation-Version": "${version}",
      "Implementation-Vendor": "KnightMiner",
      "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
    ])
  }
}